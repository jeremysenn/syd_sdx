= render partial: "shared/navbars/trips_navbar", locals: {title: "Trips"}

- @title="Trips"
.jumbotron{style: 'background-color: #FFFFFF;'}
  .container
    -#
      %p.pull-right
        %a{href: "sdxtriplocationlogger://logLocation?apiAddress=#{current_user.company.dragon_api}&tripId=#{@trips.first['Id']}&tripDesc=#{@trips.first['TripNumber']}"} 
          %i.fa.fa-mobile
          Location Logger App

    -#
      .well
        #map
    %p
      %a{href: drivers_trips_path, class: 'btn btn-default  customer_button', data: {disable_with: "<i class='fa fa-spinner fa-spin fa-lg'></i> Drivers Map"}}
        %i.fa.fa-map
        Drivers Map
    %p#current_location{"data-trip-id" => nil, style: 'display:none'}

    - unless @trips.blank?
      #accordion.panel-group{"aria-multiselectable" => "true", :role => "tablist"}
        - @trips.each_with_index do |trip, index|
          =# trip
          - workorders = Trip.workorders(trip)
          - customer_id = trip['WorkOrders']['MobileWorkOrderInformation']['CustomerId'] unless trip['WorkOrders'].blank? or trip['WorkOrders']['MobileWorkOrderInformation'].blank?
          .panel.panel-default
            .panel-heading{id: "trip_#{index}", :role => "tab"}
              .pull-right
                &nbsp;
                %a{href: nil, class: 'hide_trip_icon'}
                  %i.fa.fa-times-circle
              .panel-title
                %a{"aria-controls" => "collapseOne", "aria-expanded" => "true", "data-parent" => "#accordion", "data-toggle" => "collapse", :href => "#collapse_#{index}", :role => "button"}
                  = "#{trip['TripNumber']}"
                  = Trip.tasks(trip).first['Customer']
                  %small
                    .text-muted
                      - unless session[:time_zone].blank?
                        = "#{trip['BeginDate'].to_datetime.in_time_zone(session[:time_zone]).strftime('%m/%d/%y %l:%M:%S%P')}"
                      - else
                        = "#{trip['BeginDate'].to_datetime.strftime('%m/%d/%y %l:%M:%S%P')}"
                      - unless trip['EndDate'].blank? or trip['EndDate'].is_a? Hash
                        = " - "
                        - unless session[:time_zone].blank?
                          = "#{trip['EndDate'].to_datetime.in_time_zone(session[:time_zone]).strftime('%m/%d/%y %l:%M:%S%P')}"
                        - else
                          = "#{trip['EndDate'].to_datetime.strftime('%m/%d/%y %l:%M:%S%P')}"
                      %br
                      - Trip.workorders(trip).reverse.each do |workorder|
                        = @task_functions.find {|task_function| task_function['Id'] == workorder['TaskTypeFunctionId']}['Name']
                      %br
                      = trip['Truck']
                      - Trip.workorders(trip).each do |workorder|
                        %i= workorder['Notes']
                        %br
                - unless customer_id.blank? or not current_user.mobile_buy?
                  %a{href: create_ticket_customer_path(customer_id, related_workorder_id: workorders.blank? ? nil : workorders.first['Id']), class: "btn btn-default btn-sm customer_button", data: {:confirm => 'Are you sure you want to create a new ticket for this customer/trip?', disable_with: "<i class='fa fa-spinner fa-spin fa-lg'></i> Ticket"} }
                    %i.fa.fa-ticket
                    Ticket
                -# %btn.btn.btn-success.btn-sm#watch_me{:onclick => "getLocation(); $(this).hide(); $('#current_location').data('trip-id', '#{trip['Id']}'); $('#current_location').show(); $('#stop_watch').show();"}
                - if current_user.location_logging?
                  -#
                    %btn.btn.btn-success.btn-sm.watch_me{:onclick => "getLocation(); $('.watch_me').hide(); $('#current_location').data('trip-id', '#{trip['Id']}'); $('#current_location').show(); $(this).closest('.panel').find('.stop_watch').show();"}
                      %i.fa.fa-location-arrow
                      Track Me
                  %a.btn.btn-success.btn-sm{href: "sdxtriplocationlogger://logLocation?apiAddress=#{current_user.company.dragon_api}&tripId=#{trip['Id']}&tripDesc=#{trip['TripNumber']}"}
                    %i.fa.fa-location-arrow
                    Track Me
                  -# %btn.btn.btn-primary.btn-sm#stop_watch{style: 'display:none', :onclick => "stopWatch(); $(this).hide(); $('#current_location').hide(); $('#watch_me').show();"}
                  %btn.btn.btn-primary.btn-sm.stop_watch{style: 'display:none', :onclick => "stopWatch(); $(this).hide(); $('#current_location').hide();  $('.watch_me').show();"}
                    %i.fa.fa-location-arrow
                    Stop
                  %a{href: locations_trip_path(trip['Id']), class: "btn btn-default btn-sm customer_button", data: {disable_with: "<i class='fa fa-spinner fa-spin fa-lg'></i> Locations"} }
                    %i.fa.fa-map-pin
                    Locations
                -#
                  %br
                  %button.btn.btn-default.btn-sm{"data-content" => "#{render partial: 'trip_notes', locals: {workorders: Trip.workorders(trip)}}", "data-placement" => 'top', "data-html" => "true", "data-toggle" => "popover", :role => "button", :tabindex => "0", title: "Trip Notes"}
                    %i.fa.fa-sticky-note-o
                    Notes
            .panel-collapse.collapse{id: "collapse_#{index}", "aria-labelledby" => "trip_#{index}", :role => "tabpanel"}
              %ul.list-group
                - Trip.tasks(trip).group_by { |t| t['WorkOrderNumber'] }.each do |service_request_number, tasks|
                  - workorder = Trip.workorders(trip).find{|w| w["WorkOrderNumber"] == service_request_number}
                  .list-group-item
                    %strong Service Request
                    = service_request_number
                    %br
                    %strong Container
                    = "#{workorder['DispatchContainer']} - #{workorder['ContainerType']}" unless workorder.blank?
                    %br
                    %strong Commodity
                    = workorder['Commodity'].blank? ? 'None' : workorder['Commodity'] unless workorder.blank?
                  - tasks.each do |task|
                    %a{href: "#task_#{task['Id']}_modal", "data-target" => "#task_#{task['Id']}_modal", "data-toggle" => "modal", class: "list-group-item #{task_status_color(task['TaskStatus'])}", id: "task_#{task['Id']}_link"}
                      = task['Sequence']
                      = task_type_string(task['TaskType'])
                      %small
                        .text-muted 
                          - unless task['ToLocation'].blank?
                            = task['ToLocation']
                          - else
                            7100 30th Ave N
                          %br
                          %div{id: "task_#{task['Id']}_status_string"}= task_status_string(task['TaskStatus'])
                    / Modal
                    .modal{id: "task_#{task['Id']}_modal", "aria-labelledby" => "myModalLabel", :role => "dialog"}
                      -# .modal-dialog{class: "#{mobile_device? ? '' : 'modal-lg'}", :role => "document"}
                      .modal-dialog{:role => "document"}
                        .modal-content
                          .modal-body
                            %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
                              %span{"aria-hidden" => "true"} Ã—
                            %br
                            = render partial: "tasks/edit", locals: {task: task, workorder: Trip.workorders(trip).find {|workorder| workorder['Id'] == task['WorkOrderId']}, task_containers: Task.containers(task)}
                          .modal-footer
                            %button.btn.btn-default{"data-dismiss" => "modal", :type => "button"} Close

    - else
      %p.text-center No trips found

=# render partial: "shared/pack_contracts_footer_navbar", locals: {title: "Contracts"}

:javascript
  /*
  var map;
  function initialize() {
    // Get all maps with ".containers_map"
    var maps = document.getElementsByClassName("containers_map");

    var ids, gps, mapId = '';

    // Loop: Explore all elements with "containers_map" and create a new Google Map object for each
    for(var i=0; i<maps.length; i++) {

      //var coords = [
      //    {lat: 42.178232, lng: -122.670078},
      //    {lat: 42.182794, lng: -122.679565},
      //];

      // Get ID of single div
      mapId = document.getElementById(maps[i].id);
      var containers = eval(mapId.getAttribute('container-coordinates-hashes-array'));

      if(containers.length > 0){
        console.log("containers", containers);
        console.log("length", containers.length);

        // Create new Google Map object for single canvas 
        mapId.style.width = "100%";
        mapId.style.height = "150px";
        map = new google.maps.Map(mapId, {
          zoom: 14,
          center: new google.maps.LatLng(parseFloat(containers[0].lat), parseFloat(containers[0].lng)),
          mapTypeId: 'roadmap',
          mapTypeControl: true,
          zoomControlOptions: {
              position: google.maps.ControlPosition.RIGHT_TOP
          }
        });
        var infowindow = new google.maps.InfoWindow();
        var marker, j;
        for (j = 0; j < containers.length; j++) {
          var container = containers[j];
          var latlng = new google.maps.LatLng(container.lat, container.lng);

          // Create new Google Marker object for new map
          marker = new google.maps.Marker({
            // Use our LatLng array bellow
            position: latlng,
            map: map,
            title: container.number
          });

          google.maps.event.addListener(marker, 'click', (function (marker, j) {
            return function () {
              infowindow.setContent(marker.title);
              infowindow.open(map, marker);
            }
          })(marker, j));
        }
      }
    }
  }
  */

-# %script{:src => "https://maps.googleapis.com/maps/api/js?key=#{ENV['GOOGLE_MAPS_API_KEY']}&callback=initialize"}

:javascript
  // Start location tracking
  var x = document.getElementById("current_location");
  var geoWatch;
  var wakelock;

  function getLocation() {
      if (navigator.geolocation) {
          geoWatch = navigator.geolocation.watchPosition(showPosition);
      } else { 
          x.innerHTML = "Geolocation is not supported by this browser.";}
      }

  function showPosition(position) {
      x.innerHTML="Lat: " + position.coords.latitude + 
      "<br>Long: " + position.coords.longitude;
      console.log("position changed");
      trip_id = $("#current_location").data( "trip-id" );
      $.ajax({
        url: "/trips/" + trip_id + "/log_location",
        type: 'get',
        dataType: 'json',
        data: {
          latitude: position.coords.latitude,
          longitude: position.coords.longitude
        }, 
        success: function(data) {
          console.log(data);
          continue_logging = data.continue_logging
          if (continue_logging == "false") {
            stopWatch();
            $('.stop_watch').hide(); 
            $('#current_location').hide();  
            $('.watch_me').show();
          }
        } 
      });
  }

  function stopWatch() {
    navigator.geolocation.clearWatch( geoWatch );
    geoWatch = undefined;
  }
  // End location tracking